/*
 * This file is generated by jOOQ.
 */
package ru.kazemirov.test1.jooq.sample.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.kazemirov.test1.jooq.sample.model.DbEmail;
import ru.kazemirov.test1.jooq.sample.model.Keys;
import ru.kazemirov.test1.jooq.sample.model.tables.records.EmailRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Email extends TableImpl<EmailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db_email.email</code>
     */
    public static final Email EMAIL = new Email();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailRecord> getRecordType() {
        return EmailRecord.class;
    }

    /**
     * The column <code>db_email.email.id</code>.
     */
    public final TableField<EmailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_email.email.email</code>.
     */
    public final TableField<EmailRecord, String> EMAIL_ = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    private Email(Name alias, Table<EmailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Email(Name alias, Table<EmailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>db_email.email</code> table reference
     */
    public Email(String alias) {
        this(DSL.name(alias), EMAIL);
    }

    /**
     * Create an aliased <code>db_email.email</code> table reference
     */
    public Email(Name alias) {
        this(alias, EMAIL);
    }

    /**
     * Create a <code>db_email.email</code> table reference
     */
    public Email() {
        this(DSL.name("email"), null);
    }

    public <O extends Record> Email(Table<O> child, ForeignKey<O, EmailRecord> key) {
        super(child, key, EMAIL);
    }

    @Override
    public Schema getSchema() {
        return DbEmail.DB_EMAIL;
    }

    @Override
    public Identity<EmailRecord, Integer> getIdentity() {
        return (Identity<EmailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmailRecord> getPrimaryKey() {
        return Keys.KEY_EMAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmailRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailRecord>>asList(Keys.KEY_EMAIL_PRIMARY);
    }

    @Override
    public Email as(String alias) {
        return new Email(DSL.name(alias), this);
    }

    @Override
    public Email as(Name alias) {
        return new Email(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Email rename(String name) {
        return new Email(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Email rename(Name name) {
        return new Email(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
